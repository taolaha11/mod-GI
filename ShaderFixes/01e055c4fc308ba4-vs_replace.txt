// ---- Created with 3Dmigoto v1.3.16 on Mon Mar  3 15:53:26 2025
cbuffer cb5 : register(b5)
{
  float4 cb5[21];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[7];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[11];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[3];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : TEXCOORD0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v1.xyz, cb4[4].xyz);
  r0.y = dot(v1.xyz, cb4[5].xyz);
  r0.z = dot(v1.xyz, cb4[6].xyz);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyzw = cb4[1].xyzw * v0.yyyy;
  r1.xyzw = cb4[0].xyzw * v0.xxxx + r1.xyzw;
  r1.xyzw = cb4[2].xyzw * v0.zzzz + r1.xyzw;
  r1.xyzw = cb4[3].xyzw * v0.wwww + r1.xyzw;
  r2.xyz = -r1.xyz * cb2[0].www + cb2[0].xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r0.xyz, r2.xyz);
  r0.w = -r0.w * r0.w + 1;
  r0.w = sqrt(r0.w);
  r0.w = cb3[10].z * r0.w;
  r0.xyz = -r0.xyz * r0.www + r1.xyz;
  r0.w = cmp(cb3[10].z != 0.000000);
  r0.xyz = r0.www ? r0.xyz : r1.xyz;
  r2.xyzw = cb5[18].xyzw * r0.yyyy;
  r2.xyzw = cb5[17].xyzw * r0.xxxx + r2.xyzw;
  r0.xyzw = cb5[19].xyzw * r0.zzzz + r2.xyzw;
  r0.xyzw = cb5[20].xyzw * r1.wwww + r0.xyzw;
  o2.xyzw = r1.xyzw;
  r1.x = min(0.100000001, cb0[2].z);
  r1.x = cb3[10].x + -r1.x;
  r1.x = r1.x / r0.w;
  r1.x = min(0, r1.x);
  r1.x = max(-1, r1.x);
  r1.x = r1.x + r0.z;
  r1.y = min(r1.x, r0.w);
  r1.y = r1.y + -r1.x;
  r0.z = cb3[10].y * r1.y + r1.x;
  o0.xyzw = r0.xyzw;
  o3.zw = r0.zw;
  o1.xy = float2(0,0);
  r0.y = cb1[6].x * r0.y;
  r0.xz = float2(0.5,0.5) * r0.xw;
  r0.w = 0.5 * r0.y;
  o3.xy = r0.xw + r0.zz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Mar  3 15:53:26 2025
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz
// TEXCOORD                 0   xyzw        2     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 1   xy          1     NONE   float   xy
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_constantbuffer CB1[7], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB3[11], immediateIndexed
dcl_constantbuffer CB4[7], immediateIndexed
dcl_constantbuffer CB5[21], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
dp3 r0.x, v1.xyzx, cb4[4].xyzx
dp3 r0.y, v1.xyzx, cb4[5].xyzx
dp3 r0.z, v1.xyzx, cb4[6].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyzw, v0.yyyy, cb4[1].xyzw
mad r1.xyzw, cb4[0].xyzw, v0.xxxx, r1.xyzw
mad r1.xyzw, cb4[2].xyzw, v0.zzzz, r1.xyzw
mad r1.xyzw, cb4[3].xyzw, v0.wwww, r1.xyzw
mad r2.xyz, -r1.xyzx, cb2[0].wwww, cb2[0].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r2.xyzx
mad r0.w, -r0.w, r0.w, l(1.000000)
sqrt r0.w, r0.w
mul r0.w, r0.w, cb3[10].z
mad r0.xyz, -r0.xyzx, r0.wwww, r1.xyzx
ne r0.w, cb3[10].z, l(0.000000)
movc r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
mul r2.xyzw, r0.yyyy, cb5[18].xyzw
mad r2.xyzw, cb5[17].xyzw, r0.xxxx, r2.xyzw
mad r0.xyzw, cb5[19].xyzw, r0.zzzz, r2.xyzw
mad r0.xyzw, cb5[20].xyzw, r1.wwww, r0.xyzw
mov o2.xyzw, r1.xyzw
min r1.x, cb0[2].z, l(0.100000)
add r1.x, -r1.x, cb3[10].x
div r1.x, r1.x, r0.w
min r1.x, r1.x, l(0.000000)
max r1.x, r1.x, l(-1.000000)
add r1.x, r0.z, r1.x
min r1.y, r0.w, r1.x
add r1.y, -r1.x, r1.y
mad r0.z, cb3[10].y, r1.y, r1.x
mov o0.xyzw, r0.xyzw
mov o3.zw, r0.zzzw
mov o1.xy, l(0,0,0,0)
mul r0.y, r0.y, cb1[6].x
mul r0.xz, r0.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
mul r0.w, r0.y, l(0.500000)
add o3.xy, r0.zzzz, r0.xwxx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
